[gd_scene load_steps=11 format=3 uid="uid://ctir3rulkdkxj"]

[ext_resource type="Script" path="res://scripts/Chest.gd" id="1_betjm"]
[ext_resource type="Texture2D" uid="uid://bgmawtdq75t3t" path="res://assests/temp_asset_pack.png" id="1_sosic"]
[ext_resource type="PackedScene" uid="uid://ggq3fennnku3" path="res://scenes/Interactable.tscn" id="2_3jjf6"]

[sub_resource type="Shader" id="Shader_odtjx"]
code = "shader_type canvas_item;

uniform vec4 color : source_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			0 
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a <= 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qy5dx"]
shader = SubResource("Shader_odtjx")

[sub_resource type="AtlasTexture" id="AtlasTexture_bpq3n"]
atlas = ExtResource("1_sosic")
region = Rect2(224, 176, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_edl8c"]
atlas = ExtResource("1_sosic")
region = Rect2(224, 192, 16, 16)

[sub_resource type="SpriteFrames" id="SpriteFrames_74cpn"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_bpq3n")
}],
"loop": true,
"name": &"closed",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_edl8c")
}],
"loop": true,
"name": &"open",
"speed": 5.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_l1m5f"]
size = Vector2(16, 8)

[sub_resource type="CircleShape2D" id="CircleShape2D_jckxk"]
radius = 28.0179

[node name="Chest" type="StaticBody2D"]
script = ExtResource("1_betjm")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
material = SubResource("ShaderMaterial_qy5dx")
sprite_frames = SubResource("SpriteFrames_74cpn")
animation = &"closed"

[node name="Collider" type="CollisionShape2D" parent="."]
position = Vector2(0, 4)
shape = SubResource("RectangleShape2D_l1m5f")

[node name="Interactable" parent="." instance=ExtResource("2_3jjf6")]
item_name = "Chest"

[node name="CollisionShape2D" type="CollisionShape2D" parent="Interactable"]
shape = SubResource("CircleShape2D_jckxk")
